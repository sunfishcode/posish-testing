name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: stable
    - run: cargo fmt --all -- --check

  check:
    name: Check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable, nightly, 1.48]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
          - build: nightly
            os: ubuntu-latest
            rust: nightly
          - build: 1.48
            os: ubuntu-latest
            rust: 1.48

    env:
      # -D warnings is commented out in our install-rust action; re-add it here.
      RUSTFLAGS: -D warnings
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}

    - run: >
        rustup target add
        x86_64-unknown-linux-musl
        x86_64-unknown-linux-gnux32
        x86_64-linux-android
        i686-linux-android
        x86_64-apple-darwin
        x86_64-unknown-freebsd
        x86_64-unknown-netbsd
        x86_64-fuchsia
        x86_64-unknown-illumos
        i686-unknown-linux-gnu
        i686-unknown-linux-musl
        wasm32-unknown-emscripten
        riscv64gc-unknown-linux-gnu
        aarch64-unknown-linux-gnu
        aarch64-unknown-linux-musl
        powerpc64le-unknown-linux-gnu
        armv5te-unknown-linux-gnueabi
    - name: Install cross-compilation tools
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y gcc-i686-linux-gnu gcc-aarch64-linux-gnu gcc-riscv64-linux-gnu gcc-arm-linux-gnueabi musl-tools
    - run: cargo check --workspace --release -vv
    - run: cargo check --workspace --release -vv --target=x86_64-unknown-linux-musl
    - run: cargo check --workspace --release -vv --target=x86_64-unknown-linux-gnux32
    - run: cargo check --workspace --release -vv --target=x86_64-linux-android
    - run: cargo check --workspace --release -vv --target=i686-linux-android
    - run: cargo check --workspace --release -vv --target=x86_64-apple-darwin
    - run: cargo check --workspace --release -vv --target=x86_64-unknown-freebsd
    - run: cargo check --workspace --release -vv --target=x86_64-unknown-netbsd
    - run: cargo check --workspace --release -vv --target=x86_64-fuchsia
    - run: cargo check --workspace --release -vv --target=x86_64-unknown-illumos
    - run: cargo check --workspace --release -vv --target=i686-unknown-linux-gnu
    - run: cargo check --workspace --release -vv --target=i686-unknown-linux-musl
    - run: cargo check --workspace --release -vv --target=wasm32-unknown-emscripten
    - run: cargo check --workspace --release -vv --target=riscv64gc-unknown-linux-gnu
    - run: cargo check --workspace --release -vv --target=aarch64-unknown-linux-gnu
    - run: cargo check --workspace --release -vv --target=aarch64-unknown-linux-musl
    - run: cargo check --workspace --release -vv --target=powerpc64le-unknown-linux-gnu
    - run: cargo check --workspace --release -vv --target=armv5te-unknown-linux-gnueabi

  check_no_default_features:
    name: Check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable, nightly]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
          - build: nightly
            os: ubuntu-latest
            rust: nightly

    env:
      # -D warnings is commented out in our install-rust action; re-add it here.
      RUSTFLAGS: -D warnings
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - run: cargo check --workspace --release --no-default-features --features itoa -vv

  check_nightly:
    name: Check on Rust nightly
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [nightly]
        include:
          - build: nightly
            os: ubuntu-latest
            rust: nightly

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - run: >
        rustup target add
        x86_64-unknown-redox
        wasm32-wasi
    - run: cargo check --workspace --release -vv --target=x86_64-unknown-redox
    - run: cargo check --workspace --release -vv --target=wasm32-wasi

  check_tier3:
    name: Check selected Tier 3 platforms
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [nightly]
        include:
          - build: nightly
            os: ubuntu-latest
            rust: nightly

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
      env:
        # See the comments in the libc crate
        RUSTFLAGS: -A improper_ctypes_definitions
    - run: rustup component add rust-src
    - run: cargo check -Z build-std=core,alloc,std --target x86_64-unknown-openbsd --all-targets

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    env:
      QEMU_BUILD_VERSION: 6.1.0
    strategy:
      matrix:
        build: [ubuntu, ubuntu-18.04, i686-linux, aarch64-linux, powerpc64le-linux, riscv64-linux, arm-linux, ubuntu-stable, i686-linux-stable, aarch64-linux-stable, riscv64-linux-stable, arm-linux-stable, macos, macos-11, windows, windows-2016, windows-2022]
        include:
          - build: ubuntu
            os: ubuntu-latest
            rust: nightly
          - build: ubuntu-18.04
            os: ubuntu-18.04
            rust: nightly
          - build: i686-linux
            os: ubuntu-latest
            rust: nightly
            target: i686-unknown-linux-gnu
            gcc_package: gcc-i686-linux-gnu
            gcc: i686-linux-gnu-gcc
            libc_package: libc-dev-i386-cross
          - build: aarch64-linux
            os: ubuntu-latest
            rust: nightly
            target: aarch64-unknown-linux-gnu
            gcc_package: gcc-aarch64-linux-gnu
            gcc: aarch64-linux-gnu-gcc
            qemu: qemu-aarch64
            qemu_args: -L /usr/aarch64-linux-gnu
            qemu_target: aarch64-linux-user
          - build: powerpc64le-linux
            os: ubuntu-latest
            rust: nightly
            target: powerpc64le-unknown-linux-gnu
            gcc_package: gcc-powerpc64le-linux-gnu
            gcc: powerpc64le-linux-gnu-gcc
            qemu: qemu-ppc64le
            qemu_args: -L /usr/powerpc64le-linux-gnu
            qemu_target: ppc64le-linux-user
          - build: riscv64-linux
            os: ubuntu-latest
            rust: nightly
            target: riscv64gc-unknown-linux-gnu
            gcc_package: gcc-riscv64-linux-gnu
            gcc: riscv64-linux-gnu-gcc
            qemu: qemu-riscv64
            qemu_args: -L /usr/riscv64-linux-gnu
            qemu_target: riscv64-linux-user
          - build: arm-linux
            os: ubuntu-latest
            rust: nightly
            target: armv5te-unknown-linux-gnueabi
            gcc_package: gcc-arm-linux-gnueabi
            gcc: arm-linux-gnueabi-gcc
            qemu: qemu-arm
            qemu_args: -L /usr/arm-linux-gnueabi
            qemu_target: arm-linux-user
          - build: ubuntu-stable
            os: ubuntu-latest
            rust: stable
          - build: i686-linux-stable
            os: ubuntu-latest
            rust: stable
            target: i686-unknown-linux-gnu
            gcc_package: gcc-i686-linux-gnu
            gcc: i686-linux-gnu-gcc
            libc_package: libc-dev-i386-cross
          - build: aarch64-linux-stable
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            gcc_package: gcc-aarch64-linux-gnu
            gcc: aarch64-linux-gnu-gcc
            qemu: qemu-aarch64
            qemu_args: -L /usr/aarch64-linux-gnu
            qemu_target: aarch64-linux-user
          - build: riscv64-linux-stable
            os: ubuntu-latest
            rust: stable
            target: riscv64gc-unknown-linux-gnu
            gcc_package: gcc-riscv64-linux-gnu
            gcc: riscv64-linux-gnu-gcc
            qemu: qemu-riscv64
            qemu_args: -L /usr/riscv64-linux-gnu
            qemu_target: riscv64-linux-user
          - build: arm-linux-stable
            os: ubuntu-latest
            rust: stable
            target: armv5te-unknown-linux-gnueabi
            gcc_package: gcc-arm-linux-gnueabi
            gcc: arm-linux-gnueabi-gcc
            qemu: qemu-arm
            qemu_args: -L /usr/arm-linux-gnueabi
            qemu_target: arm-linux-user
          - build: macos
            os: macos-latest
            rust: stable
          - build: macos-11
            os: macos-11
            rust: stable
          - build: windows
            os: windows-latest
            rust: nightly
          - build: windows-2022
            os: windows-2022
            rust: nightly
          - build: windows-2016
            os: windows-2016
            rust: nightly
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}

    - name: Configure Cargo target
      run: |
        echo CARGO_BUILD_TARGET=${{ matrix.target }} >> $GITHUB_ENV
        rustup target add ${{ matrix.target }}
      if: matrix.target != ''

    - uses: actions/cache@v2
      with:
        path: ${{ runner.tool_cache }}/qemu
        key: qemu-${{ matrix.target }}-${{ env.QEMU_BUILD_VERSION }}
      if: matrix.target != '' && matrix.os == 'ubuntu-latest'

    - name: Install cross-compilation tools
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.gcc_package }} ninja-build
        upcase=$(echo ${{ matrix.target }} | awk '{ print toupper($0) }' | sed 's/-/_/g')
        echo CARGO_TARGET_${upcase}_LINKER=${{ matrix.gcc }} >> $GITHUB_ENV
      if: matrix.gcc_package != '' && matrix.os == 'ubuntu-latest'

    - name: Install cross-compilation libraries
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.libc_package }}
      if: matrix.libc_package != '' && matrix.os == 'ubuntu-latest'

    - name: Install qemu
      run: |
        set -ex

        upcase=$(echo ${{ matrix.target }} | awk '{ print toupper($0) }' | sed 's/-/_/g')
        echo CARGO_TARGET_${upcase}_RUNNER=${{ runner.tool_cache }}/qemu/bin/${{ matrix.qemu }} ${{ matrix.qemu_args }} >> $GITHUB_ENV

        # See if qemu is already in the cache
        if [ -f ${{ runner.tool_cache }}/qemu/bin/${{ matrix.qemu }} ]; then
          exit 0
        fi

        # Download and build qemu from source since the most recent release is
        # way faster at arm emulation than the current version github actions'
        # ubuntu image uses. Disable as much as we can to get it to build
        # quickly.
        cd
        curl https://download.qemu.org/qemu-$QEMU_BUILD_VERSION.tar.xz | tar xJf -
        cd qemu-$QEMU_BUILD_VERSION
        ./configure --target-list=${{ matrix.qemu_target }} --prefix=${{ runner.tool_cache }}/qemu --disable-tools --disable-slirp --disable-fdt --disable-capstone --disable-docs
        ninja -C build install
      if: matrix.qemu != '' && matrix.os == 'ubuntu-latest'

    - run: |
        # Run the tests, and check the prebuilt release libraries.
        cargo test --verbose --features=all-impls,procfs,cc --release --workspace -- --nocapture
      env:
        RUST_BACKTRACE: 1

    - run: |
        # Check the prebuilt debug libraries too.
        cargo check --features=cc

  test_rustix_use_libc:
    name: Test rustix_use_libc
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [ubuntu, i686-linux, aarch64-linux, powerpc64le-linux, riscv64-linux, arm-linux]
        include:
          - build: ubuntu
            os: ubuntu-latest
            rust: stable
          - build: i686-linux
            os: ubuntu-latest
            rust: stable
            target: i686-unknown-linux-gnu
            gcc_package: gcc-i686-linux-gnu
            gcc: i686-linux-gnu-gcc
            libc_package: libc-dev-i386-cross
          - build: aarch64-linux
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            gcc_package: gcc-aarch64-linux-gnu
            gcc: aarch64-linux-gnu-gcc
            qemu: qemu-aarch64
            qemu_args: -L /usr/aarch64-linux-gnu
            qemu_target: aarch64-linux-user
          - build: powerpc64le-linux
            os: ubuntu-latest
            rust: stable
            target: powerpc64le-unknown-linux-gnu
            gcc_package: gcc-powerpc64le-linux-gnu
            gcc: powerpc64le-linux-gnu-gcc
            qemu: qemu-ppc64le
            qemu_args: -L /usr/powerpc64le-linux-gnu
            qemu_target: ppc64le-linux-user
          - build: riscv64-linux
            os: ubuntu-latest
            rust: stable
            target: riscv64gc-unknown-linux-gnu
            gcc_package: gcc-riscv64-linux-gnu
            gcc: riscv64-linux-gnu-gcc
            qemu: qemu-riscv64
            qemu_args: -L /usr/riscv64-linux-gnu
            qemu_target: riscv64-linux-user
          - build: arm-linux
            os: ubuntu-latest
            rust: stable
            target: armv7-unknown-linux-gnueabihf
            gcc_package: gcc-arm-linux-gnueabihf
            gcc: arm-linux-gnueabihf-gcc
            qemu: qemu-arm
            qemu_args: -L /usr/arm-linux-gnueabihf
            qemu_target: arm-linux-user
    env:
      # -D warnings is commented out in our install-rust action; re-add it here.
      RUSTFLAGS: -D warnings
      QEMU_BUILD_VERSION: 6.1.0
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}

    - name: Configure Cargo target
      run: |
        echo CARGO_BUILD_TARGET=${{ matrix.target }} >> $GITHUB_ENV
        rustup target add ${{ matrix.target }}
      if: matrix.target != ''

    - uses: actions/cache@v2
      with:
        path: ${{ runner.tool_cache }}/qemu
        key: qemu-${{ matrix.target }}-${{ env.QEMU_BUILD_VERSION }}
      if: matrix.target != '' && matrix.os == 'ubuntu-latest'

    - name: Install cross-compilation tools
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.gcc_package }} ninja-build
        upcase=$(echo ${{ matrix.target }} | awk '{ print toupper($0) }' | sed 's/-/_/g')
        echo CARGO_TARGET_${upcase}_LINKER=${{ matrix.gcc }} >> $GITHUB_ENV
      if: matrix.gcc_package != '' && matrix.os == 'ubuntu-latest'

    - name: Install cross-compilation libraries
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.libc_package }}
      if: matrix.libc_package != '' && matrix.os == 'ubuntu-latest'

    - name: Install qemu
      run: |
        set -ex

        upcase=$(echo ${{ matrix.target }} | awk '{ print toupper($0) }' | sed 's/-/_/g')
        echo CARGO_TARGET_${upcase}_RUNNER=${{ runner.tool_cache }}/qemu/bin/${{ matrix.qemu }} ${{ matrix.qemu_args }} >> $GITHUB_ENV

        # See if qemu is already in the cache
        if [ -f ${{ runner.tool_cache }}/qemu/bin/${{ matrix.qemu }} ]; then
          exit 0
        fi

        # Download and build qemu from source since the most recent release is
        # way faster at arm emulation than the current version github actions'
        # ubuntu image uses. Disable as much as we can to get it to build
        # quickly.
        cd
        curl https://download.qemu.org/qemu-$QEMU_BUILD_VERSION.tar.xz | tar xJf -
        cd qemu-$QEMU_BUILD_VERSION
        ./configure --target-list=${{ matrix.qemu_target }} --prefix=${{ runner.tool_cache }}/qemu --disable-tools --disable-slirp --disable-fdt --disable-capstone --disable-docs
        ninja -C build install
      if: matrix.qemu != '' && matrix.os == 'ubuntu-latest'

    - run: |
        cargo test --verbose --features=use-libc,all-impls,procfs --release --workspace -- --nocapture
      env:
        RUST_BACKTRACE: 1

  test_rustix_use_experimental_asm:
    name: Test rustix_use_experimental_asm
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [powerpc64le-linux]
        include:
          - build: powerpc64le-linux
            os: ubuntu-latest
            rust: nightly
            target: powerpc64le-unknown-linux-gnu
            gcc_package: gcc-powerpc64le-linux-gnu
            gcc: powerpc64le-linux-gnu-gcc
            qemu: qemu-ppc64le
            qemu_args: -L /usr/powerpc64le-linux-gnu
            qemu_target: ppc64le-linux-user
    env:
      # -D warnings is commented out in our install-rust action; re-add it here.
      RUSTFLAGS: --cfg rustix_use_experimental_asm -D warnings
      RUSTDOCFLAGS: --cfg rustix_use_experimental_asm
      CARGO_TARGET_POWERPC64LE_UNKNOWN_LINUX_GNU_RUSTFLAGS: --cfg rustix_use_experimental_asm
      QEMU_BUILD_VERSION: 6.1.0
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}

    - name: Configure Cargo target
      run: |
        echo CARGO_BUILD_TARGET=${{ matrix.target }} >> $GITHUB_ENV
        rustup target add ${{ matrix.target }}
      if: matrix.target != ''

    - uses: actions/cache@v2
      with:
        path: ${{ runner.tool_cache }}/qemu
        key: qemu-${{ matrix.target }}-${{ env.QEMU_BUILD_VERSION }}
      if: matrix.target != '' && matrix.os == 'ubuntu-latest'

    - name: Install cross-compilation tools
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.gcc_package }} ninja-build
        upcase=$(echo ${{ matrix.target }} | awk '{ print toupper($0) }' | sed 's/-/_/g')
        echo CARGO_TARGET_${upcase}_LINKER=${{ matrix.gcc }} >> $GITHUB_ENV
      if: matrix.gcc_package != '' && matrix.os == 'ubuntu-latest'

    - name: Install cross-compilation libraries
      run: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.libc_package }}
      if: matrix.libc_package != '' && matrix.os == 'ubuntu-latest'

    - name: Install qemu
      run: |
        set -ex

        upcase=$(echo ${{ matrix.target }} | awk '{ print toupper($0) }' | sed 's/-/_/g')
        echo CARGO_TARGET_${upcase}_RUNNER=${{ runner.tool_cache }}/qemu/bin/${{ matrix.qemu }} ${{ matrix.qemu_args }} >> $GITHUB_ENV

        # See if qemu is already in the cache
        if [ -f ${{ runner.tool_cache }}/qemu/bin/${{ matrix.qemu }} ]; then
          exit 0
        fi

        # Download and build qemu from source since the most recent release is
        # way faster at arm emulation than the current version github actions'
        # ubuntu image uses. Disable as much as we can to get it to build
        # quickly.
        cd
        curl https://download.qemu.org/qemu-$QEMU_BUILD_VERSION.tar.xz | tar xJf -
        cd qemu-$QEMU_BUILD_VERSION
        ./configure --target-list=${{ matrix.qemu_target }} --prefix=${{ runner.tool_cache }}/qemu --disable-tools --disable-slirp --disable-fdt --disable-capstone --disable-docs
        ninja -C build install
      if: matrix.qemu != '' && matrix.os == 'ubuntu-latest'

    - run: |
        cargo test --verbose --features=all-impls,procfs --release --workspace -- --nocapture
      env:
        RUST_BACKTRACE: 1
